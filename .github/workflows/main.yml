# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_VERSION: "20.10.8"
  DOCKER_COMPOSE_VERSION: "1.29.2"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Clear dist
        run: |
          rm -rf dist/*
          mkdir -p dist
          
      - name: Build tools image
        run: docker build -t container-desktop-tools:build --build-arg "DOCKER_VERSION=$DOCKER_VERSION" tools/container-desktop-tools/

      - name: Download and extract docker cli
        run: docker run --rm -v $PWD:/src container-desktop-tools:build sh -c "curl -LO https://download.docker.com/win/static/stable/x86_64/docker-$DOCKER_VERSION.zip && unzip -o docker-$DOCKER_VERSION.zip -x docker/dockerd.exe -d /src/dist"
      
      - name: Download docker compose
        run: docker run --rm -v $PWD:/src container-desktop-tools:build sh -c "curl -L -o /src/dist/docker/docker-compose.exe https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-Windows-x86_64.exe"
      
      - name: Build proxy for Windows
        run: docker run --rm -v $PWD:/go/src -w /go/src/cmd/container-desktop-proxy -e GOOS=windows -e GOARCH=amd64 golang:1.17 go build -v -o /go/src/dist/container-desktop-proxy-windows-amd64.exe
      
      - name: Build proxy for Linux 
        run: docker run --rm -v $PWD:/go/src -w /go/src/cmd/container-desktop-proxy -e GOOS=linux -e GOARCH=amd64 golang:1.17 go build -v -o /go/src/dist/container-desktop-proxy-linux-amd64
      
      - name: Build distro image
        run: docker build -t container-desktop:build --build-arg DOCKER_VERSION=$DOCKER_VERSION .
      
      - name: Create WSL distro from the distro image
        run: |
          sha=$(docker create container-desktop:build)
          docker run --rm -v $PWD:/src --privileged -v /var/run/docker.sock:/var/run/docker.sock container-desktop-tools:build sh -c "docker export $sha | gzip > /src/dist/container-desktop-distro.tar.gz"
          docker rm $sha
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
  
  build-windows:
    runs-on: windows-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v2
      
      - name: Clear dist
        shell: bash
        run: |
         rm -rf dist/*
         mkdir -p dist
          
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      
      - name: Setup dotnet SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: "6.0"
          include-prerelease: true
          
      - name: Publish ContainerDesktop
        shell: bash
        run: dotnet publish -c Release container-desktop/ContainerDesktop/ContainerDesktop.csproj

      - name: Package ContainerDesktop
        shell: bash
        working-directory: ./container-desktop/ContainerDesktop/bin/Release/net6.0-windows/win-x64/publish
        run: 7z a -r -bd -mx9 -tzip $GITHUB_WORKSPACE/dist/container-desktop.zip .
      
      - name: Publish ContainerDesktop Installer
        shell: bash
        run: dotnet publish -c Release container-desktop/Installer/Installer.csproj -o dist-installer
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist-installer
        
          
      
      
      
